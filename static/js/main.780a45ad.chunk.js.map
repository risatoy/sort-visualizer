{"version":3,"sources":["sortVisualizer/sortVisualizer.jsx","sortAlgorithms/mergeSort.js","sortAlgorithms/quickSort.js","sortAlgorithms/selectionSort.js","sortAlgorithms/insertionSort.js","constants.js","sortDetails.jsx","App.js","index.js"],"names":["ANIMATION_SPEED_MS","delay","processes","SortingVisualizer","props","state","array","divs","sort","funcQueue","inProcess","isSorted","this","generateArray","generateDivs","min","max","i","push","Math","floor","random","setState","document","querySelector","children","length","clearTimeout","shift","stopProcess","arrayBars","getElementsByClassName","style","backgroundColor","height","innerHTML","display","speed","mergeSort","quickSort","selectionSort","insertionSort","e","target","value","sortButton","getElementById","id","selectedButton","classList","remove","add","className","class","onClick","selectSort","resetArray","icon","faRedo","start","faPlay","forward","faStepForward","map","idx","React","Component","updateDiv","currentElement","process","window","setTimeout","updateDivSwap","swapElement","temp","innerText","wrapFunction","fn","context","params","apply","end","mid","constants","l","r","result","ind","t","merge","prevPivot","low","high","pivot","pivot_item","left","right","swap","partition","firstPos","secondPos","len","j","tmp","current","yellow","red","green","SortDetails","href","App","Navbar","Container","Brand","ReactDOM","render","StrictMode"],"mappings":"gYAUIA,EAAqB,GAErBC,EAAQ,EACRC,EAAY,GAEKC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,GACPC,KAAM,IAGV,EAAKC,KAAO,YAEZ,EAAKC,UAAY,GACjB,EAAKC,WAAY,EACjB,EAAKC,UAAW,EAZD,E,gEAgBfC,KAAKC,gBACLD,KAAKE,iB,sCAML,IADA,IAmLuBC,EAAKC,EAnLxBV,EAAQ,GACHW,EAAI,EAAGA,EAAI,EAAGA,IACnBX,EAAMY,MAiLaH,EAjLc,EAiLTC,EAjLY,EAkLrCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,KAhLhDH,KAAKU,SAAS,CAAChB,UACfM,KAAKP,MAAMC,MAAQA,I,qCAInBM,KAAKP,MAAME,KAAOgB,SAASC,cAAc,yBAAyBC,W,oCAoO1E,WACI,KAA4B,IAArBvB,EAAUwB,QACbC,aAAazB,EAAU,IACvBA,EAAU0B,QAnOVC,GACAjB,KAAKC,gBACL,IAAK,IAAII,EAAI,EAAGA,EAAIL,KAAKP,MAAMC,MAAMoB,OAAQT,IAAK,CAC9C,IAAMa,EAAYP,SAASQ,uBAAuB,OAClDD,EAAUb,GAAGe,MAAMC,gBAAkB,UACrCH,EAAUb,GAAGe,MAAME,OAAnB,UAAqD,GAAtBtB,KAAKP,MAAMC,MAAMW,GAAhD,MACAa,EAAUb,GAAGkB,UAAb,gBAAkCvB,KAAKP,MAAMC,MAAMW,GAAnD,WAEJL,KAAKH,UAAY,GACjBG,KAAKD,UAAW,EAChBY,SAASC,cAAc,cAAcQ,MAAMI,QAAU,S,kCAG7CC,GAEJrC,EADQ,MAARqC,EACqB,GACN,MAARA,EACc,IAEA,M,8BAUzB,IALkB,cAAdzB,KAAKJ,MAAsBI,KAAK0B,YAClB,cAAd1B,KAAKJ,MAAsBI,KAAK2B,YAClB,kBAAd3B,KAAKJ,MAA0BI,KAAK4B,gBACtB,kBAAd5B,KAAKJ,MAA0BI,KAAK6B,gBAEjC7B,KAAKH,UAAUiB,OAAS,GAC1Bd,KAAKH,UAAUmB,OAAfhB,K,gCAKyB,IAA1BA,KAAKH,UAAUiB,SAAmC,IAAnBd,KAAKF,YAAyC,IAAlBE,KAAKD,WAC9C,cAAdC,KAAKJ,MAAsBI,KAAK0B,YAClB,cAAd1B,KAAKJ,MAAsBI,KAAK2B,YAClB,kBAAd3B,KAAKJ,MAA0BI,KAAK4B,gBACtB,kBAAd5B,KAAKJ,MAA0BI,KAAK6B,gBAExClB,SAASC,cAAc,cAAcQ,MAAMI,QAAU,QACrDb,SAASC,cAAc,aAAaW,UAAYvB,KAAKH,UAAUiB,QAG/Dd,KAAKH,UAAUiB,QAAU,IACzBH,SAASC,cAAc,UAAUW,UAAYvB,KAAKH,UAAUiB,OAC9B,IAA1Bd,KAAKH,UAAUiB,QACfd,KAAKF,WAAY,EACjBE,KAAKD,UAAW,IAEhBC,KAAKF,WAAY,EAChBE,KAAKH,UAAUmB,OAAfhB,O,iCAKF8B,GACP9B,KAAKJ,KAAOkC,EAAEC,OAAOC,MACrB,IAAIC,EAAatB,SAASuB,eAAeJ,EAAEC,OAAOI,IAC9CC,EAAiBzB,SAASC,cAAc,YAExCwB,GAAgBA,EAAeC,UAAUC,OAAO,WACpDL,EAAWI,UAAUE,IAAI,a,kCAIzBvC,KAAKH,UAAY6B,YAAU1B,KAAKP,MAAMC,MAAO,EAAGM,KAAKP,MAAMC,MAAMoB,OAAS,EAAGd,KAAKP,MAAME,KAAMP,K,kCAQ9FY,KAAKH,UAAY8B,YAAU3B,KAAKP,MAAMC,MAAO,EAAGM,KAAKP,MAAMC,MAAMoB,OAAS,EAAGd,KAAKP,MAAME,KAAMP,K,sCAS9FY,KAAKH,UAAY+B,YAAc5B,KAAKP,MAAMC,MAAOM,KAAKP,MAAME,KAAMP,K,sCAQlEY,KAAKH,UAAYgC,YAAc7B,KAAKP,MAAMC,MAAOM,KAAKP,MAAME,KAAMP,K,+BAkB5D,IAAD,OACEM,EAASM,KAAKP,MAAdC,MAEP,OACA,sBAAK8C,UAAU,MAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,wBAAQC,MAAM,4BAA4BN,GAAG,YAAYH,MAAM,YAAYU,QAAS,SAACZ,GAAD,OAAO,EAAKa,WAAWb,IAA3G,wBACA,wBAAQW,MAAM,oBAAoBN,GAAG,YAAYH,MAAM,YAAYU,QAAS,SAACZ,GAAD,OAAO,EAAKa,WAAWb,IAAnG,wBACA,wBAAQW,MAAM,oBAAoBN,GAAG,gBAAgBH,MAAM,gBAAgBU,QAAS,SAACZ,GAAD,OAAO,EAAKa,WAAWb,IAA3G,4BACA,wBAAQW,MAAM,oBAAoBN,GAAG,aAAaH,MAAM,gBAAgBU,QAAS,SAACZ,GAAD,OAAO,EAAKa,WAAWb,IAAxG,+BAIJ,sBAAKK,GAAG,oBAAR,UACI,gCACI,wBAAQM,MAAM,SAASC,QAAS,kBAAM,EAAKE,cAA3C,SAAyD,cAAC,IAAD,CAAiBC,KAAMC,QAChF,uBAAOL,MAAM,aAAb,+BAEJ,gCACI,wBAAQA,MAAM,SAASC,QAAS,kBAAM,EAAKK,SAA3C,SAAqD,cAAC,IAAD,CAAiBF,KAAMG,QAC5E,uBAAOP,MAAM,aAAb,wBAEJ,gCACI,wBAAQA,MAAM,SAASC,QAAS,kBAAM,EAAKO,WAA3C,SAAsD,cAAC,IAAD,CAAiBJ,KAAMK,QAC7E,uBAAOT,MAAM,aAAb,gCAiBR,qBAAKD,UAAU,qBAAqBL,GAAG,uBAAvC,SACKzC,EAAMyD,KAAI,SAACnB,EAAOoB,GAAR,OACP,qBAAKZ,UAAU,MAEdpB,MAAO,CAACE,OAAO,GAAD,OAAW,GAANU,EAAL,OAFf,SAGA,+BAAOA,KAFDoB,QAMd,sBAAKjB,GAAG,YAAR,oBAA2B,sBAAMA,GAAG,QAAT,eAA3B,IAAqD,sBAAMA,GAAG,WAAT,yB,GApMlBkB,IAAMC,WAsN9C,SAASC,EACdC,EACAnC,EACAI,EACAH,GAEEjC,IACAoE,EAAUC,OAAOC,YAAW,WAC5BH,EAAepC,MAAMC,gBAAkBA,EACnCC,IACAkC,EAAepC,MAAME,OAArB,UAAwC,GAAPA,EAAjC,MACAkC,EAAejC,UAAf,gBAAoCD,EAApC,cAEAjC,GAASoC,GACbnC,EAAUgB,KAAKmD,GAGZ,SAASG,EACZJ,EACAK,EACAxC,EACAI,GAEEpC,IACAoE,EAAUC,OAAOC,YAAW,WAE1BH,EAAepC,MAAMC,gBAAkBA,EACvCwC,EAAYzC,MAAMC,gBAAkBA,EAEpC,IAAMyC,EAAON,EAAeO,UAC5BP,EAAepC,MAAME,OAArB,UAAuD,GAAtBuC,EAAYE,UAA7C,MACAP,EAAejC,UAAf,gBAAoCsC,EAAYE,UAAhD,WAEAF,EAAYzC,MAAME,OAAlB,UAAmC,GAALwC,EAA9B,MACAD,EAAYtC,UAAZ,gBAAiCuC,EAAjC,aACEzE,GAASoC,GACbnC,EAAUgB,KAAKmD,GAId,IAAIO,EAAe,SAASC,EAAIC,EAASC,GAC5C,OAAO,WACHF,EAAGG,MAAMF,EAASC,O,kDC/Q1B,oDAGItE,EAAY,GAET,SAAS6B,EAAUhC,EAAOqD,EAAOsB,EAAK1E,EAAM8B,GACjD,GAAIsB,EAAQsB,EAAK,CACb,IAAIC,EAAM/D,KAAKC,OAAOuC,EAAQsB,GAAO,GACrCxE,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK2E,GAAMC,IAAkB9C,KAE3EC,EAAUhC,EAAOqD,EAAOuB,EAAK3E,EAAM8B,GACnCC,EAAUhC,EAAO4E,EAAM,EAAGD,EAAK1E,EAAM8B,GAQ3C,SAAe/B,EAAOqD,EAAOuB,EAAKD,EAAK1E,EAAM8B,GAO3C,IANA,IAAI+C,EAAIzB,EACJ0B,EAAIH,EAAM,EAEVI,EAAS,GACTC,EAAM,EAEDtE,EAAI0C,EAAO1C,GAAKgE,EAAKhE,IACxBmE,EAAIF,GACJI,EAAOC,GAAOjF,EAAM+E,GACpB5E,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK8E,GAAIF,IAAe9C,KACtEgD,GAAK,GACE/E,EAAM8E,GAAK9E,EAAM+E,IAAMA,EAAIJ,GAClCK,EAAOC,GAAOjF,EAAM8E,GACpB3E,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK6E,GAAID,IAAe9C,KACtE+C,GAAK,IAELE,EAAOC,GAAOjF,EAAM+E,GACpB5E,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK8E,GAAIF,IAAe9C,KACtEgD,GAAK,GAETE,GAAM,EAGR,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKC,IACvBlF,EAAMqD,GAAS2B,EAAOE,GACtB/E,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKoD,GAAQwB,IAAiB9C,EAAOiD,EAAO3B,MAC1FA,GAAS,EAjCP8B,CAAMnF,EAAOqD,EAAOuB,EAAKD,EAAK1E,EAAM8B,GAGxC,OAAO5B,I,gCChBT,sCAIIiF,EAJJ,cAKIjF,EAAY,GAET,SAAS8B,EAAUjC,EAAOqF,EAAKC,EAAMrF,EAAM8B,GAChD,IAAIwD,EAWJ,OATID,EAAOD,IACTE,EAWJ,SAAmBvF,EAAOqF,EAAKC,EAAMrF,EAAM8B,GACzC,IAAIyD,EAAaxF,EAAMqF,GAEnBI,EAAOJ,EACPK,EAAQJ,EACZ,KAAOG,EAAOC,GAAO,CAEnB,KAAO1F,EAAMyF,IAASD,GACpBrF,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKwF,GAAOZ,IAAe9C,KACzE5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKwF,GAAOZ,IAAiB9C,KAC3E0D,IAIF,KAAOzF,EAAM0F,GAASF,GACpBrF,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKyF,GAAQb,IAAe9C,KAC1E5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKyF,GAAQb,IAAiB9C,KAC5E2D,IAGED,EAAOC,IACTvF,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKwF,GAAOZ,IAAe9C,KACzE5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKyF,GAAQb,IAAe9C,KAC1E4D,EAAK3F,EAAOyF,EAAMC,EAAOzF,EAAM8B,IAYnC,OARA/B,EAAMqF,GAAOrF,EAAM0F,GAEnB1F,EAAM0F,GAASF,EAIfrF,EAAUS,KAAK0D,YAAaJ,IAAe5D,KAAM,CAACL,EAAKoF,GAAMpF,EAAKyF,GAAQb,IAAiB9C,KAEpF2D,EA9CGE,CAAU5F,EAAOqF,EAAKC,EAAMrF,EAAM8B,GAE1CqD,EAAYG,EACZtD,EAAUjC,EAAOqF,EAAKE,EAAQ,EAAGtF,EAAM8B,GACvCE,EAAUjC,EAAOuF,EAAQ,EAAGD,EAAMrF,EAAM8B,GACxC5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKmF,GAAYP,IAAiB9C,MAG3E5B,EAyCT,SAASwF,EAAK3F,EAAO6F,EAAUC,EAAW7F,EAAM8B,GAC9C,IAAMqC,EAAOpE,EAAM6F,GACnB7F,EAAM6F,GAAY7F,EAAM8F,GACxB3F,EAAUS,KAAK0D,YAAaJ,IAAe5D,KAAM,CAACL,EAAK4F,GAAW5F,EAAK6F,GAAYjB,IAAiB9C,KACpG/B,EAAM8F,GAAa1B,EAInBjE,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK4F,GAAWhB,IAAiB9C,KAC/E5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK6F,GAAYjB,IAAiB9C,O,gCCrElF,oDAGO,SAASG,EAAclC,EAAOC,EAAM8B,GAIzC,IAHA,IAAI5B,EAAY,GACV4F,EAAM/F,EAAMoB,OAETT,EAAI,EAAGA,EAAIoF,EAAKpF,IAAK,CAG5B,IAFA,IAAIF,EAAME,EAEDqF,EAAIrF,EAAI,EAAGqF,EAAID,EAAKC,IAC3B7F,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK+F,EAAI,GAAInB,IAAkB9C,KAC7E5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK+F,EAAI,GAAInB,IAAiB9C,KAC5E5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK+F,GAAInB,IAAkB9C,KACzE5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK+F,GAAInB,IAAiB9C,KAEpE/B,EAAMS,GAAOT,EAAMgG,KACrBvF,EAAMuF,GAIV,GAAIvF,IAAQE,EAAG,CACbR,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKQ,GAAMoE,IAAe9C,KACxE5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKU,GAAIkE,IAAe9C,KAEtE,IAAIkE,EAAMjG,EAAMW,GAChBX,EAAMW,GAAKX,EAAMS,GACjBN,EAAUS,KAAK0D,YAAaJ,IAAe5D,KAAM,CAACL,EAAKU,GAAIV,EAAKQ,GAAMoE,IAAe9C,KACrF/B,EAAMS,GAAOwF,EAEb9F,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKU,GAAIkE,IAAiB9C,KACxE5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKQ,GAAMoE,IAAiB9C,KAG5E5B,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKU,GAAIkE,IAAiB9C,KAE1E,OAAO5B,I,gCCpCT,oDAIO,SAASgC,EAAcnC,EAAOC,EAAM8B,GAGvC,IAFA,IAAI5B,EAAY,GAEPQ,EAAI,EAAGA,EAAIX,EAAMoB,OAAQT,IAAK,CACnCR,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAKU,GAAIkE,IAAe9C,KAKtE,IAHA,IAAImE,EAAUlG,EAAMW,GAEhBqF,EAAIrF,EAAE,EACHqF,GAAK,GAAKE,EAAUlG,EAAMgG,IAC7BhG,EAAMgG,EAAE,GAAKhG,EAAMgG,GACnB7F,EAAUS,KAAK0D,YAAaT,IAAWvD,KAAM,CAACL,EAAK+F,GAAInB,IAAkB9C,KACzE5B,EAAUS,KAAK0D,YAAaJ,IAAe5D,KAAM,CAACL,EAAK+F,EAAI,GAAI/F,EAAK+F,GAAInB,IAAiB9C,KACzFiE,IAGJhG,EAAMgG,EAAE,GAAKE,EAGjB,OAAO/F,I,+BCvBX,sGAAO,IAAMgG,EAAS,UACTC,EAAM,UACNC,EAAQ,W,qNCCAC,G,6KAEb,OACI,sBAAKxD,UAAU,MAAf,UACI,sBAAKL,GAAG,6BAAR,UACI,gCACI,4CACA,qBAAKM,MAAM,kBAAX,SACI,+BACI,+BACI,wCACA,iDAEJ,+BACI,uCACA,iDAEJ,+BACI,0CACA,iDAEJ,+BACI,wCACA,gDAIZ,qKAEJ,gCACI,4CACA,qBAAKA,MAAM,kBAAX,SACI,+BACI,+BACI,wCACA,6CAEJ,+BACI,uCACA,iDAEJ,+BACI,0CACA,iDAEJ,+BACI,wCACA,oDAIZ,yMAEJ,gCACI,gDACA,qBAAKA,MAAM,kBAAX,SACI,+BACI,+BACI,wCACA,6CAEJ,+BACI,uCACA,6CAEJ,+BACI,0CACA,6CAEJ,+BACI,wCACA,gDAIZ,gKAEJ,gCACI,gDACA,qBAAKA,MAAM,kBAAX,SACI,+BACI,+BACI,wCACA,6CAEJ,+BACI,uCACA,2CAEJ,+BACI,0CACA,6CAEJ,+BACI,wCACA,gDAIZ,mKAGR,sBAAKN,GAAG,SAAR,gCAEI,mBAAG8D,KAAK,6BAAR,wC,GAxGqB5C,IAAMC,Y,wBCmBhC4C,MAjBf,WACE,OACE,sBAAK1D,UAAU,MAAf,UACE,cAAC2D,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACD,EAAA,EAAOE,MAAR,CAAcJ,KAAK,IAAnB,sCAMJ,cAAC,IAAD,IACA,cAAC,EAAD,QCZNK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7F,SAASuB,eAAe,W","file":"static/js/main.780a45ad.chunk.js","sourcesContent":["import React from 'react';\nimport {mergeSort} from '../sortAlgorithms/mergeSort.js';\nimport {quickSort} from '../sortAlgorithms/quickSort.js';\nimport {selectionSort} from '../sortAlgorithms/selectionSort.js';\nimport {insertionSort} from '../sortAlgorithms/insertionSort.js';\nimport './sortVisualizer.css';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRedo, faStepForward, faPlay } from \"@fortawesome/free-solid-svg-icons\";\n\nvar ANIMATION_SPEED_MS = 10;\n\nlet delay = 0;\nlet processes = [];\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            divs: [],\n        };\n\n        this.sort = \"mergeSort\"\n\n        this.funcQueue = []\n        this.inProcess = false\n        this.isSorted = false\n    }\n\n    componentDidMount() {\n        this.generateArray();\n        this.generateDivs();\n    }\n\n    generateArray() {\n        // let array = [4,3,2,1,2];\n        let array = []\n        for (let i = 0; i < 5; i++) {\n            array.push(randomIntFromInterval(1, 5));\n        }\n        this.setState({array});\n        this.state.array = array;\n    }\n\n    generateDivs() {\n        this.state.divs = document.querySelector('#visualizer-container').children;\n    }\n\n    resetArray() {\n        stopProcess(); // to kill running processes\n        this.generateArray()\n        for (let i = 0; i < this.state.array.length; i++) {\n            const arrayBars = document.getElementsByClassName('bar');\n            arrayBars[i].style.backgroundColor = '#3C403D';\n            arrayBars[i].style.height = `${this.state.array[i] * 10}px`;\n            arrayBars[i].innerHTML = `<span>${this.state.array[i]}</span>`\n        }\n        this.funcQueue = []\n        this.isSorted = false\n        document.querySelector(\"#countstep\").style.display = \"none\"\n    }\n\n    changeSpeed(speed) {\n        if (speed==='2') {\n            ANIMATION_SPEED_MS = 10;\n        } else if (speed==='1') {\n            ANIMATION_SPEED_MS = 100;\n        } else {\n            ANIMATION_SPEED_MS = 500;\n        }\n    }\n\n    start() {\n        if (this.sort === \"mergeSort\") this.mergeSort();\n        if (this.sort === \"quickSort\") this.quickSort();\n        if (this.sort === \"selectionSort\") this.selectionSort();\n        if (this.sort === \"insertionSort\") this.insertionSort();\n\n        while (this.funcQueue.length > 0) {\n            (this.funcQueue.shift())();\n        }\n    }\n\n    forward(){\n        if (this.funcQueue.length === 0 && this.inProcess === false && this.isSorted === false) {\n            if (this.sort === \"mergeSort\") this.mergeSort();\n            if (this.sort === \"quickSort\") this.quickSort();\n            if (this.sort === \"selectionSort\") this.selectionSort();\n            if (this.sort === \"insertionSort\") this.insertionSort();\n\n            document.querySelector(\"#countstep\").style.display = \"block\"\n            document.querySelector(\"#countall\").innerHTML = this.funcQueue.length\n        } \n        \n        if (this.funcQueue.length >= 0) {\n            document.querySelector(\"#count\").innerHTML = this.funcQueue.length\n            if (this.funcQueue.length === 0) {\n                this.inProcess = false;\n                this.isSorted = true;\n            } else {\n                this.inProcess = true;\n                (this.funcQueue.shift())();\n            }\n        }\n    }\n\n    selectSort(e) {\n        this.sort = e.target.value\n        let sortButton = document.getElementById(e.target.id);\n        let selectedButton = document.querySelector(\".clicked\");\n\n        if (selectedButton) selectedButton.classList.remove(\"clicked\");\n        sortButton.classList.add(\"clicked\");\n    }\n\n    mergeSort() {\n        this.funcQueue = mergeSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        // if (processes.length === 0) {\n        //     delay = 0;\n        //     mergeSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        // }\n    }\n\n    quickSort() {\n        this.funcQueue = quickSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n\n        // if (processes.length === 0) {\n        //     delay = 0;\n        //     quickSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        // }\n    }\n\n    selectionSort() {\n        this.funcQueue = selectionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n        // if (processes.length === 0) {\n        //     delay = 0;\n        //     selectionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n        // }\n    }\n\n    insertionSort() {\n        this.funcQueue = insertionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n    }\n\n//     bubbleSort() {}\n\n//     testSortingAlgorithms() {\n//         for (let i = 0; i < 100; i++) {\n//             const array = [];\n//             const length = randomIntFromInterval(1, 1000);\n//             for (let i = 0; i < length; i++) {\n//                 array.push(randomIntFromInterval(-1000, 1000));\n//             }\n//             const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//             const mergeSortedArray = getMergeSortAnimations(array.slice());\n//             console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray))\n//         }\n//     }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <div className=\"App\">\n            <div className=\"container-box\">\n                <button class=\"button sortButton clicked\" id=\"mergesort\" value=\"mergeSort\" onClick={(e) => this.selectSort(e)}>MERGE SORT</button>\n                <button class=\"button sortButton\" id=\"quicksort\" value=\"quickSort\" onClick={(e) => this.selectSort(e)}>QUICK SORT</button>\n                <button class=\"button sortButton\" id=\"selectionsort\" value=\"selectionSort\" onClick={(e) => this.selectSort(e)}>SELECTION SORT</button>\n                <button class=\"button sortButton\" id=\"insertsort\" value=\"insertionSort\" onClick={(e) => this.selectSort(e)}>INSERTION SORT</button>\n{/*                 <button id=\"button\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button> */}\n            </div>\n{/*             <button id=\"button\" onClick={() => this.testSortingAlgorithms()}>TEST ALGOS</button> */}\n            <div id=\"control-container\">\n                <div>\n                    <button class=\"button\" onClick={() => this.resetArray()}><FontAwesomeIcon icon={faRedo} /></button>\n                    <small class=\"text-muted\">Generate array</small>\n                </div>\n                <div>\n                    <button class=\"button\" onClick={() => this.start() }><FontAwesomeIcon icon={faPlay} /></button>\n                    <small class=\"text-muted\">Run all</small>\n                </div>\n                <div>\n                    <button class=\"button\" onClick={() => this.forward()}><FontAwesomeIcon icon={faStepForward} /></button>\n                    <small class=\"text-muted\">Step by step</small>\n                </div>\n            </div>\n\n          {/* <div className=\"container-box\">\n                <div id=\"slider-label\" md={1}>slow</div>\n                    <form id=\"sliderData\">\n                        <input id=\"slider\"\n                               type=\"range\"\n                               min=\"0\"\n                               max=\"2\"\n                               step=\"1\"\n                               onChange={e => this.changeSpeed(e.target.value)}/>\n                    </form>\n                <div id=\"slider-label\" md={1}>fast</div>\n            </div> */}\n\n            <div className=\"bars container-box\" id=\"visualizer-container\">\n                {array.map((value, idx) => (\n                    <div className='bar'\n                     key={idx}\n                     style={{height: `${value*10}px`}}>\n                    <span>{value}</span>\n                    </div>\n                ))}\n            </div>\n            <div id=\"countstep\">Steps: <span id=\"count\">0</span>/<span id=\"countall\">0</span></div>\n        </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n\nexport function updateDiv(\n  currentElement,\n  backgroundColor,\n  speed,\n  height\n) {\n    delay++\n    process = window.setTimeout(() => {\n    currentElement.style.backgroundColor = backgroundColor;\n    if (height) {\n        currentElement.style.height = `${height*10}px`;\n        currentElement.innerHTML = `<span>${height}</span>`;\n    }\n    }, (delay += speed));\n    processes.push(process);\n}\n\nexport function updateDivSwap(\n    currentElement,\n    swapElement,\n    backgroundColor,\n    speed\n  ) {\n      delay++\n      process = window.setTimeout(() => {\n        \n        currentElement.style.backgroundColor = backgroundColor;\n        swapElement.style.backgroundColor = backgroundColor;\n\n        const temp = currentElement.innerText\n        currentElement.style.height = `${swapElement.innerText*10}px`\n        currentElement.innerHTML = `<span>${swapElement.innerText}</span>`;\n\n        swapElement.style.height = `${temp*10}px`;\n        swapElement.innerHTML = `<span>${temp}</span>`;\n      }, (delay += speed));\n      processes.push(process);\n  }\n\n\nexport let wrapFunction = function(fn, context, params) {\n    return function() {\n        fn.apply(context, params);\n    };\n}\n\nfunction stopProcess() {\n    while (processes.length !== 0 ) {\n        clearTimeout(processes[0]);\n        processes.shift();\n     }\n}\n","import {updateDiv, updateDivSwap, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\nlet funcQueue = [];\n\nexport function mergeSort(array, start, end, divs, speed) {\n  if (start < end) {\n      let mid = Math.floor((start + end) / 2);\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[mid], constants.yellow, speed])); // color update\n\n      mergeSort(array, start, mid, divs, speed);\n      mergeSort(array, mid + 1, end, divs, speed);\n\n      merge(array, start, mid, end, divs, speed);\n  }\n\n  return funcQueue\n}\n\nfunction merge(array, start, mid, end, divs, speed) {\n  let l = start;\n  let r = mid + 1;\n\n  let result = [];\n  let ind = 0;\n  \n  for (let i = start; i <= end; i++) {\n    if (l > mid) {\n        result[ind] = array[r];\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[r], constants.red, speed]));\n        r += 1\n    } else if (array[l] < array[r] || r > end) {\n        result[ind] = array[l];\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[l], constants.red, speed]));\n        l += 1\n    } else {\n        result[ind] = array[r];\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[r], constants.red, speed]));\n        r += 1\n    }\n    ind +=1\n  }\n\n  for (let t = 0; t < ind; t++) {\n    array[start] = result[t];\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[start], constants.green, speed, result[start]]));\n    start += 1\n  }\n}","import {updateDiv, updateDivSwap, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\n// to store the last pivot\nlet prevPivot;\nlet funcQueue = []\n\nexport function quickSort(array, low, high, divs, speed) {\n  let pivot;\n  // termination condition\n  if (high > low) {\n    pivot = partition(array, low, high, divs, speed);\n    // to store the index of the previous pivot\n    prevPivot = pivot;\n    quickSort(array, low, pivot - 1, divs, speed);\n    quickSort(array, pivot + 1, high, divs, speed);\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[prevPivot], constants.green, speed]));\n  }\n\n  return funcQueue\n}\n\nfunction partition(array, low, high, divs, speed) {\n  let pivot_item = array[low];\n\n  let left = low;\n  let right = high;\n  while (left < right) {\n    // move left while item < pivot\n    while (array[left] <= pivot_item) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[left], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[left], constants.green, speed]));\n      left++;\n    }\n\n    // move right while item > pivot\n    while (array[right] > pivot_item) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.green, speed]));\n      right--;\n    }\n\n    if (left < right) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[left], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.red, speed]));\n      swap(array, left, right, divs, speed);\n    }\n  }\n\n  array[low] = array[right];\n  // funcQueue.push(wrapFunction(updateDiv, this, [divs[low], constants.green, speed, array[right]]));\n  array[right] = pivot_item;\n  // if (prevPivot) {\n  //   funcQueue.push(wrapFunction(updateDiv, this, [divs[prevPivot], constants.green, speed]));\n  // }\n  funcQueue.push(wrapFunction(updateDivSwap, this, [divs[low], divs[right], constants.green, speed]));\n\n  return right;\n}\n\nfunction swap(array, firstPos, secondPos, divs, speed) {\n  const temp = array[firstPos];\n  array[firstPos] = array[secondPos];\n  funcQueue.push(wrapFunction(updateDivSwap, this, [divs[firstPos], divs[secondPos], constants.green, speed]));\n  array[secondPos] = temp;\n  // funcQueue.push(wrapFunction(updateDiv, this, [divs[secondPos], constants.red, speed, temp]));\n\n  // making the divs back to green after swap\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[firstPos], constants.green, speed]));\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[secondPos], constants.green, speed]));\n}","import {updateDiv, updateDivSwap, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\nexport function selectionSort(array, divs, speed){\n  let funcQueue = [];\n  const len = array.length;\n\n  for (let i = 0; i < len; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < len; j++) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j - 1], constants.yellow, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j - 1], constants.green, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j], constants.yellow, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j], constants.green, speed]));\n\n      if (array[min] > array[j]) {\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[min], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.red, speed]));\n\n      let tmp = array[i];\n      array[i] = array[min];\n      funcQueue.push(wrapFunction(updateDivSwap, this, [divs[i], divs[min], constants.red, speed]));\n      array[min] = tmp;\n\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.green, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[min], constants.green, speed]));\n    }\n\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.green, speed])) // the part where sorted part is completed\n  }\n  return funcQueue\n}","import {updateDiv, updateDivSwap, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js';\n\n\nexport function insertionSort(array, divs, speed) {\n    let funcQueue = [];\n    \n    for (let i = 1; i < array.length; i++) {\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.red, speed]))\n\n        let current = array[i];\n\n        let j = i-1;\n        while (j > -1 && current < array[j]) {\n            array[j+1] = array[j];\n            funcQueue.push(wrapFunction(updateDiv, this, [divs[j], constants.yellow, speed]))\n            funcQueue.push(wrapFunction(updateDivSwap, this, [divs[j + 1], divs[j], constants.green, speed]))\n            j--;\n            // funcQueue.push(wrapFunction(updateDiv, this, [divs[j + 1], constants.yellow, speed, array[j]]))\n        }\n        array[j+1] = current;\n        // funcQueue.push(wrapFunction(updateDiv, this, [divs[j + 1], constants.green, speed, current]))\n    }\n    return funcQueue\n}\n\n// export function insertionSort(array, divs, speed) {\n//     for (let i = 1; i < array.length; i++) {\n//         updateDiv(divs[i], constants.red, speed);\n\n//         let current = array[i];\n\n//         let j = i-1;\n//         while (j > -1 && current < array[j]) {\n//             array[j+1] = array[j];\n//             updateDiv(divs[j + 1], constants.green, speed, array[j]);\n//             j--;\n//             updateDiv(divs[j + 1], constants.yellow, speed, array[j]);\n//         }\n//         array[j+1] = current;\n//         updateDiv(divs[j + 1], constants.green, speed, current);\n//     }\n// }","export const yellow = \"#fcf75e\";\nexport const red = \"#fe6f5e\";\nexport const green = '#355e3b';","import React from 'react';\nimport \"./sortDetails.css\"\n\nexport default class SortDetails extends React.Component {\n    render () {\n        return (\n            <div className=\"App\">\n                <div id=\"sort-description-container\">\n                    <div>\n                        <h2>Merge Sort</h2>\n                        <div class=\"bigo-compornent\">\n                            <tr>\n                                <td>\n                                    <div>worst</div>\n                                    <span>O(n log n)</span>\n                                </td>\n                                <td>\n                                    <div>best</div>\n                                    <span>O(n log n)</span>\n                                </td>\n                                <td>\n                                    <div>average</div>\n                                    <span>O(n log n)</span>\n                                </td>\n                                <td>\n                                    <div>space</div>\n                                    <span>O(n)</span>\n                                </td>\n                            </tr>\n                        </div>\n                        <p>Merge sort works by splitting the input in half, recursively sorting each half, and then merging the sorted halves back together.</p>\n                    </div>\n                    <div>\n                        <h2>Quick Sort</h2>\n                        <div class=\"bigo-compornent\">\n                            <tr>\n                                <td>\n                                    <div>worst</div>\n                                    <span>O(n^2)</span>\n                                </td>\n                                <td>\n                                    <div>best</div>\n                                    <span>O(n log n)</span>\n                                </td>\n                                <td>\n                                    <div>average</div>\n                                    <span>O(n log n)</span>\n                                </td>\n                                <td>\n                                    <div>space</div>\n                                    <span>O(log n)</span>\n                                </td>\n                            </tr>\n                        </div>\n                        <p>Quicksort works by recursively dividing the input into two smaller arrays around a pivot item: one half has items smaller than the pivot, the other has larger items.</p>\n                    </div>\n                    <div>\n                        <h2>Selection Sort</h2>\n                        <div class=\"bigo-compornent\">\n                            <tr>\n                                <td>\n                                    <div>worst</div>\n                                    <span>O(n^2)</span>\n                                </td>\n                                <td>\n                                    <div>best</div>\n                                    <span>O(n^2)</span>\n                                </td>\n                                <td>\n                                    <div>average</div>\n                                    <span>O(n^2)</span>\n                                </td>\n                                <td>\n                                    <div>space</div>\n                                    <span>O(1)</span>\n                                </td>\n                            </tr>\n                        </div>\n                        <p>Selection sort works by repeatedly \"selecting\" the next-smallest element from the unsorted array and moving it to the front.</p>\n                    </div>\n                    <div>\n                        <h2>Insertion Sort</h2>\n                        <div class=\"bigo-compornent\">\n                            <tr>\n                                <td>\n                                    <div>worst</div>\n                                    <span>O(n^2)</span>\n                                </td>\n                                <td>\n                                    <div>best</div>\n                                    <span>O(n)</span>\n                                </td>\n                                <td>\n                                    <div>average</div>\n                                    <span>O(n^2)</span>\n                                </td>\n                                <td>\n                                    <div>space</div>\n                                    <span>O(1)</span>\n                                </td>\n                            </tr>\n                        </div>\n                        <p>Insertion sort works by inserting elements from an unsorted array into a sorted subsection of the array, one item at a time.</p>\n                    </div>\n                </div>\n                <div id=\"footer\">\n                    Made with ♥ by \n                    <a href=\"https://github.com/risatoy\"> Risa Toyoshima </a>\n                </div>\n            </div>\n        )\n    }\n}","import SortVisualizer from './sortVisualizer/sortVisualizer';\nimport SortDetails from './sortDetails';\nimport './App.css';\nimport { Navbar, Container, Nav } from 'react-bootstrap'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar>\n        <Container>\n          <Navbar.Brand href=\"#\">Visualize Sort Algo!</Navbar.Brand>\n          {/* <Nav className=\"me-auto\">\n            <Nav.Link href=\"#sort-description-container\">Detail</Nav.Link>\n          </Nav> */}\n          </Container>\n      </Navbar>\n      <SortVisualizer></SortVisualizer>\n      <SortDetails></SortDetails>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}