{"version":3,"sources":["sortVisualizer/sortVisualizer.jsx","sortAlgorithms/mergeSort.js","sortAlgorithms/quickSort.js","sortAlgorithms/selectionSort.js","sortAlgorithms/insertionSort.js","constants.js","App.js","index.js"],"names":["ANIMATION_SPEED_MS","delay","processes","SortingVisualizer","props","state","array","divs","sort","funcQueue","inProcess","isSorted","this","generateArray","generateDivs","setState","document","querySelector","children","length","clearTimeout","shift","stopProcess","i","arrayBars","getElementsByClassName","style","backgroundColor","height","display","speed","mergeSort","quickSort","selectionSort","insertionSort","innerHTML","e","target","value","sortButton","getElementById","id","selectedButton","classList","remove","add","className","class","onClick","selectSort","resetArray","icon","faRedo","start","faPlay","forward","faStepForward","map","idx","React","Component","updateDiv","currentElement","process","window","setTimeout","push","wrapFunction","fn","context","params","apply","end","mid","Math","floor","constants","l","r","result","ind","t","merge","prevPivot","low","high","pivot","pivot_item","left","right","swap","partition","firstPos","secondPos","temp","len","min","j","tmp","current","yellow","red","green","App","Navbar","Container","Brand","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fe33c821.chunk.js","sourcesContent":["import React from 'react';\nimport {mergeSort} from '../sortAlgorithms/mergeSort.js';\nimport {quickSort} from '../sortAlgorithms/quickSort.js';\nimport {selectionSort} from '../sortAlgorithms/selectionSort.js';\nimport {insertionSort} from '../sortAlgorithms/insertionSort.js';\nimport './sortVisualizer.css';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRedo, faStepForward, faPlay } from \"@fortawesome/free-solid-svg-icons\";\n\nvar ANIMATION_SPEED_MS = 10;\n\nlet delay = 0;\nlet processes = [];\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            divs: [],\n        };\n\n        this.sort = \"mergeSort\"\n\n        this.funcQueue = []\n        this.inProcess = false\n        this.isSorted = false\n    }\n\n    componentDidMount() {\n        this.generateArray();\n        this.generateDivs();\n    }\n\n    generateArray() {\n        let array = [17, 39, 28, 6];\n        // let array = []\n        // for (let i = 0; i < 10; i++) {\n        //     array.push(randomIntFromInterval(5, 100));\n        // }\n        this.setState({array});\n        this.state.array = array;\n    }\n\n    generateDivs() {\n        this.state.divs = document.querySelector('#visualizer-container').children;\n    }\n\n    resetArray() {\n        stopProcess(); // to kill running processes\n        this.generateArray()\n        for (let i = 0; i < this.state.array.length; i++) {\n            const arrayBars = document.getElementsByClassName('bar');\n            arrayBars[i].style.backgroundColor = '#3C403D';\n            arrayBars[i].style.height = `${this.state.array[i] * 2}px`;\n        }\n        this.funcQueue = []\n        this.isSorted = false\n        document.querySelector(\"#countstep\").style.display = \"none\"\n    }\n\n    changeSpeed(speed) {\n        if (speed==='2') {\n            ANIMATION_SPEED_MS = 10;\n        } else if (speed==='1') {\n            ANIMATION_SPEED_MS = 100;\n        } else {\n            ANIMATION_SPEED_MS = 500;\n        }\n    }\n\n    start() {\n        if (this.sort === \"mergeSort\") this.mergeSort();\n        if (this.sort === \"quickSort\") this.quickSort();\n        if (this.sort === \"selectionSort\") this.selectionSort();\n        if (this.sort === \"insertionSort\") this.insertionSort();\n\n        while (this.funcQueue.length > 0) {\n            (this.funcQueue.shift())();\n        }\n    }\n\n    forward(){\n        if (this.funcQueue.length === 0 && this.inProcess === false && this.isSorted === false) {\n            if (this.sort === \"mergeSort\") this.mergeSort();\n            if (this.sort === \"quickSort\") this.quickSort();\n            if (this.sort === \"selectionSort\") this.selectionSort();\n            if (this.sort === \"insertionSort\") this.insertionSort();\n\n            document.querySelector(\"#countstep\").style.display = \"block\"\n            document.querySelector(\"#countall\").innerHTML = this.funcQueue.length\n        } \n        \n        if (this.funcQueue.length >= 0) {\n            document.querySelector(\"#count\").innerHTML = this.funcQueue.length\n            if (this.funcQueue.length === 0) {\n                this.inProcess = false;\n                this.isSorted = true;\n            } else {\n                this.inProcess = true;\n                (this.funcQueue.shift())();\n            }\n        }\n    }\n\n    selectSort(e) {\n        this.sort = e.target.value\n        let sortButton = document.getElementById(e.target.id);\n        let selectedButton = document.querySelector(\".clicked\");\n\n        if (selectedButton) selectedButton.classList.remove(\"clicked\");\n        sortButton.classList.add(\"clicked\");\n    }\n\n    mergeSort() {\n        this.funcQueue = mergeSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        // if (processes.length === 0) {\n        //     delay = 0;\n        //     mergeSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        // }\n    }\n\n    quickSort() {\n        this.funcQueue = quickSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n\n        // if (processes.length === 0) {\n        //     delay = 0;\n        //     quickSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        // }\n    }\n\n    selectionSort() {\n        this.funcQueue = selectionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n        // if (processes.length === 0) {\n        //     delay = 0;\n        //     selectionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n        // }\n    }\n\n    insertionSort() {\n        this.funcQueue = insertionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n    }\n\n//     bubbleSort() {}\n\n//     testSortingAlgorithms() {\n//         for (let i = 0; i < 100; i++) {\n//             const array = [];\n//             const length = randomIntFromInterval(1, 1000);\n//             for (let i = 0; i < length; i++) {\n//                 array.push(randomIntFromInterval(-1000, 1000));\n//             }\n//             const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//             const mergeSortedArray = getMergeSortAnimations(array.slice());\n//             console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray))\n//         }\n//     }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <div className=\"App\">\n            <div className=\"container-box\">\n                <button class=\"button sortButton clicked\" id=\"mergesort\" value=\"mergeSort\" onClick={(e) => this.selectSort(e)}>MERGE SORT</button>\n                <button class=\"button sortButton\" id=\"quicksort\" value=\"quickSort\" onClick={(e) => this.selectSort(e)}>QUICK SORT</button>\n                <button class=\"button sortButton\" id=\"selectionsort\" value=\"selectionSort\" onClick={(e) => this.selectSort(e)}>SELECTION SORT</button>\n                <button class=\"button sortButton\" id=\"insertsort\" value=\"insertionSort\" onClick={(e) => this.selectSort(e)}>INSERTION SORT</button>\n{/*                 <button id=\"button\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button> */}\n            </div>\n{/*             <button id=\"button\" onClick={() => this.testSortingAlgorithms()}>TEST ALGOS</button> */}\n            <div id=\"control-container\">\n                <div>\n                    <button class=\"button\" onClick={() => this.resetArray()}><FontAwesomeIcon icon={faRedo} /></button>\n                    <small class=\"text-muted\">Generate array</small>\n                </div>\n                <div>\n                    <button class=\"button\" onClick={() => this.start() }><FontAwesomeIcon icon={faPlay} /></button>\n                    <small class=\"text-muted\">Run all</small>\n                </div>\n                <div>\n                    <button class=\"button\" onClick={() => this.forward()}><FontAwesomeIcon icon={faStepForward} /></button>\n                    <small class=\"text-muted\">Step by step</small>\n                </div>\n            </div>\n\n          {/* <div className=\"container-box\">\n                <div id=\"slider-label\" md={1}>slow</div>\n                    <form id=\"sliderData\">\n                        <input id=\"slider\"\n                               type=\"range\"\n                               min=\"0\"\n                               max=\"2\"\n                               step=\"1\"\n                               onChange={e => this.changeSpeed(e.target.value)}/>\n                    </form>\n                <div id=\"slider-label\" md={1}>fast</div>\n            </div> */}\n\n            <div className=\"bars container-box\" id=\"visualizer-container\">\n                {array.map((value, idx) => (\n                    <div className='bar'\n                     key={idx}\n                     style={{height: `${value*2}px`}}>\n                    </div>\n                ))}\n            </div>\n            <div id=\"countstep\">Steps: <span id=\"count\">0</span>/<span id=\"countall\">0</span></div>\n        </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n\nexport function updateDiv(\n  currentElement,\n  backgroundColor,\n  speed,\n  height\n) {\n    delay++\n    process = window.setTimeout(() => {\n    currentElement.style.backgroundColor = backgroundColor;\n    currentElement.style.height = `${height*2}px`;\n    }, (delay += speed));\n    processes.push(process);\n}\n\n\nexport let wrapFunction = function(fn, context, params) {\n    return function() {\n        fn.apply(context, params);\n    };\n}\n\nfunction stopProcess() {\n    while (processes.length !== 0 ) {\n        clearTimeout(processes[0]);\n        processes.shift();\n     }\n}\n","import {updateDiv, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\nlet funcQueue = [];\n\nexport function mergeSort(array, start, end, divs, speed) {\n  if (start < end) {\n      let mid = Math.floor((start + end) / 2);\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[mid], constants.yellow, speed])); // color update\n\n      mergeSort(array, start, mid, divs, speed);\n      mergeSort(array, mid + 1, end, divs, speed);\n\n      merge(array, start, mid, end, divs, speed);\n  }\n\n  return funcQueue\n}\n\nfunction merge(array, start, mid, end, divs, speed) {\n  let l = start;\n  let r = mid + 1;\n\n  let result = [];\n  let ind = 0;\n\n  for (let i = start; i <= end; i++) {\n    if (l > mid) {\n        result[ind] = array[r];\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[r], constants.red, speed, array[r]]));\n        r += 1\n    } else if (array[l] < array[r] || r > end) {\n        result[ind] = array[l];\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[l], constants.red, speed, array[l]]));\n        l += 1\n    } else {\n        result[ind] = array[r];\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[r], constants.red, speed, array[r]]));\n        r += 1\n    }\n    ind +=1\n  }\n\n  for (let t = 0; t < ind; t++) {\n    array[start] = result[t];\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[start], constants.green, speed, result[start]]));\n    start += 1\n  }\n}","import {updateDiv, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\n// to store the last pivot\nlet prevPivot;\nlet funcQueue = []\n\nexport function quickSort(array, low, high, divs, speed) {\n  let pivot;\n  // termination condition\n  if (high > low) {\n    pivot = partition(array, low, high, divs, speed);\n    // to store the index of the previous pivot\n    prevPivot = pivot;\n    quickSort(array, low, pivot - 1, divs, speed);\n    quickSort(array, pivot + 1, high, divs, speed);\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[prevPivot], constants.green, speed]));\n  }\n\n  return funcQueue\n}\n\nfunction partition(array, low, high, divs, speed) {\n  let pivot_item = array[low];\n\n  let left = low;\n  let right = high;\n  while (left < right) {\n    // move left while item < pivot\n    while (array[left] <= pivot_item) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[left], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[left], constants.green, speed]));\n      left++;\n    }\n\n    // move right while item > pivot\n    while (array[right] > pivot_item) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.green, speed]));\n      right--;\n    }\n\n    if (left < right) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[left], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.red, speed]));\n      swap(array, left, right, divs, speed);\n    }\n  }\n\n  array[low] = array[right];\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[low], constants.green, speed, array[right]]));\n  array[right] = pivot_item;\n  if (prevPivot) {\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[prevPivot], constants.green, speed]));\n  }\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[right], constants.yellow, speed, pivot_item]));\n\n  return right;\n}\n\nfunction swap(array, firstPos, secondPos, divs, speed) {\n  const temp = array[firstPos];\n  array[firstPos] = array[secondPos];\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[firstPos], constants.red, speed, array[secondPos]]));\n  array[secondPos] = temp;\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[secondPos], constants.red, speed, temp]));\n\n  // making the divs back to green after swap\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[firstPos], constants.green, speed]));\n  funcQueue.push(wrapFunction(updateDiv, this, [divs[secondPos], constants.green, speed]));\n}","import {updateDiv, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\nexport function selectionSort(array, divs, speed){\n  let funcQueue = [];\n  const len = array.length;\n\n  for (let i = 0; i < len; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < len; j++) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j - 1], constants.yellow, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j - 1], constants.green, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j], constants.yellow, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[j], constants.green, speed]));\n\n      if (array[min] > array[j]) {\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[min], constants.red, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.red, speed]));\n\n      let tmp = array[i];\n      array[i] = array[min];\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.red, speed, array[min]]));\n      array[min] = tmp;\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[min], constants.red, speed, tmp]));\n\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.green, speed]));\n      funcQueue.push(wrapFunction(updateDiv, this, [divs[min], constants.green, speed]));\n    }\n\n    funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.green, speed])) // the part where sorted part is completed\n  }\n  return funcQueue\n}","import {updateDiv, wrapFunction} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js';\n\n\nexport function insertionSort(array, divs, speed) {\n    let funcQueue = [];\n    \n    for (let i = 1; i < array.length; i++) {\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[i], constants.red, speed]))\n\n        let current = array[i];\n\n        let j = i-1;\n        while (j > -1 && current < array[j]) {\n            array[j+1] = array[j];\n            funcQueue.push(wrapFunction(updateDiv, this, [divs[j + 1], constants.green, speed, array[j]]))\n            j--;\n            funcQueue.push(wrapFunction(updateDiv, this, [divs[j + 1], constants.yellow, speed, array[j]]))\n        }\n        array[j+1] = current;\n        funcQueue.push(wrapFunction(updateDiv, this, [divs[j + 1], constants.green, speed, current]))\n    }\n    return funcQueue\n}\n\n// export function insertionSort(array, divs, speed) {\n//     for (let i = 1; i < array.length; i++) {\n//         updateDiv(divs[i], constants.red, speed);\n\n//         let current = array[i];\n\n//         let j = i-1;\n//         while (j > -1 && current < array[j]) {\n//             array[j+1] = array[j];\n//             updateDiv(divs[j + 1], constants.green, speed, array[j]);\n//             j--;\n//             updateDiv(divs[j + 1], constants.yellow, speed, array[j]);\n//         }\n//         array[j+1] = current;\n//         updateDiv(divs[j + 1], constants.green, speed, current);\n//     }\n// }","export const yellow = \"#fcf75e\";\nexport const red = \"#fe6f5e\";\nexport const green = '#355e3b';","import SortVisualizer from './sortVisualizer/sortVisualizer';\nimport './App.css';\nimport { Navbar, Container } from 'react-bootstrap'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar>\n        <Container>\n          <Navbar.Brand href=\"#home\">Visualize Sort Algo!</Navbar.Brand>\n        </Container>\n      </Navbar>\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}